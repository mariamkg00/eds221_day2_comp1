---
title: "Day 2 Interactive Lessons"
format: html
editor: visual
execute: 
  warning: false
---

```{r}
library(tidyverse)
library(here)
```

## Making & indexing data in R

### Vectors

Making vectors

```{r}
dogs <- c("teddy","khora","waffle","banjo","tallie")
  # a vector can only have data of a single type
#Checking the class of dogs
typeof(dogs)
class(dogs)
```

```{r}
my_breakfast <- c('waffles',2, TRUE, 'coffee')

typeof(my_breakfast)
class(my_breakfast)
```

```{r}
#numeric vector

weights <- c(50, 60, 25, 35, 55)
#values are stored as doubles, meaning they have a 64-bit

typeof(weights)
class(weights)
```

```{r}
weights_integer <- c(50L, 60L, 25L, 35L, 55L)

typeof(weights_integer)

class(weights_integer)
```

```{r}
is.numeric(weights_integer)
```

```{r}
zipcodes <- c(93105, 93514, 93101, 93401)

class(zipcodes)

#use as. family of functions to recast data classes
#use is. famly of functions to ask what class something is 
zipcodes_chr <- as.character(zipcodes)
```

## Making a vector with named elements

```{r}
dog_food <- c(teddy="purina", khora="alpo", waffle="fancy feast", banjo= "blue diamond", tallie= "farmer's dog")

test <- c(cat=4, dog = 100, elephant =11)
class(test)
```

If we have a vector of data, it is common to pick pieces out of data frames to do something with that value. there are a number of ways you can do this

```{r}
# to access the second element in dog_food, value is the string value. R uses 1 index, starts at 1
dog_food[2]
```

```{r}
dog_food["khora"]

```

you can also access ranges of values in a vector

use: to refer to a range (low: high)

```{r}
trees <- c("ponderosa", "lodgepole", "jeffrey", "whitecones", "bristlecone")

trees[3]

trees[3:5]
```

### Warm-up for for loops

what if I wanted to do something with each of the trees

```{r}
i <- 3
trees[i]
```

```{r}
i <- seq(1:3) # same thing as seq(from=1, to=3)
trees[i]
#giving the values of trees(1)(2)&(3)

```

```{r}
trees[3] <- "OAK"
trees
```

## Matrix indexing

```{r}
fish_size <- matrix(c(0.8, 1.2, 0.4, 0.9), ncol=2, nrow=2, byrow=FALSE)

fish_size

class(fish_size)
str(fish_size)
typeof(fish_size)

fish_size[2,2]

#keep all of the rows, in the second column
fish_size[, 2]

```

An edit

## Lists
